<!-- Index.razor -->
@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>Chat</h3>

<div class="form-group">
    <label>
        FirstName:
        <input @bind="firstNameInput" />
    </label><br />
    <label>
        LastName:
        <input @bind="lastNameInput" />
    </label><br />
    <label>
        Category:
        <input @bind="categoryInput" />
    </label><br />
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label><br />
    <label>
        Date:
        <input type="date" @bind="dateCreatedInput" />
    </label> <!-- Add input for DateCreated -->
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? firstNameInput;
    private string? lastNameInput;
    private string? messageInput;
    private string? categoryInput;
    private DateOnly dateCreatedInput = DateOnly.FromDateTime(DateTime.Today); // Initialize DateCreated

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string, string, DateOnly>("ReceiveMessage", (firstname, lastname, category, message, dateCreated) =>
        {
            var encodedMsg = $"{firstname}: {lastname}: {category}: {message}: {dateCreated}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", firstNameInput, lastNameInput, categoryInput, messageInput, dateCreatedInput); // Pass DateCreated to SendMessage
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
